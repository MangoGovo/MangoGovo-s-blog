<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go的并发编程</title>
    <link href="/2024/10/21/go%E7%9A%84%E5%B9%B6%E5%8F%91/"/>
    <url>/2024/10/21/go%E7%9A%84%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Go的并发编程"><a href="#Go的并发编程" class="headerlink" title="Go的并发编程"></a>Go的并发编程</h1><h2 id="1-并发介绍"><a href="#1-并发介绍" class="headerlink" title="1. 并发介绍"></a>1. 并发介绍</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul><li><strong>进程</strong>是程序在操作系统中的一次执行过程, 系统进行资源分配和调度的一个<strong>独立单位</strong>.</li><li><strong>线程</strong>是进程的一个执行实体, 是CPU调度和分派的<strong>基本单位</strong>, 它是比进程更小的能独立运行的基本单位.</li><li>一个进程可以<strong>创建</strong>和<strong>撤销</strong>多个线程, 同一个进程中的多个线程之间可以<strong>并发</strong>执行.</li></ul><h4 id="两者的关系"><a href="#两者的关系" class="headerlink" title="两者的关系"></a>两者的关系</h4><ul><li><p><strong>根本区别</strong>: </p><ul><li><strong>进程</strong>是操作系统资源分配的基本单位.</li><li><strong>线程</strong>是处理器任务调度和执行的基本单位.</li></ul></li><li><p><strong>资源开销</strong>: </p><ul><li>每个<strong>进程</strong>都有独立的代码和数据空间, 程序之间的切换会有<strong>较大</strong>的开销.</li><li><strong>线程</strong>可以看做轻量级的进程, 同一进程的线程共享代码和数据空间, 每个线程都有自己独立的运行栈和程序计数器, 线程之间切换的开销较小</li></ul></li><li><p><strong>内存分配</strong>: 同一进程的<strong>线程</strong>共享本<strong>进程</strong>的地址空间和资源, 而<strong>进程</strong>之间的地址空间和资源是相互独立的.</p></li><li><p><strong>影响关系</strong>: 一个进程崩溃后, 在保护模式下不会对其他进程产生影响, 但是一个线程崩溃整个进程都挂了. 所以多进程要比多线程健壮.</p></li><li><p><strong>执行过程</strong>:  每个独立的进程有程序运行的入口、顺序执行序列和程序出口. 但是线程<strong>不能独立执行</strong>, 必须依存在应用程序中, 由应用程序提供多个线程执行控制. 两者均可并发执行.</p></li></ul><h3 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程</h3><ul><li><p><strong>协程</strong>是一个完全由用户实现和控制的”轻量化的<strong>线程</strong>“</p></li><li><p>一个<strong>进程</strong>可以有多个<strong>线程</strong>, 一个<strong>线程</strong>可以多个<strong>协程</strong></p></li><li><p><strong>协程</strong>最大的优势就是其极高的<strong>执行效率</strong>. </p><ul><li>因为子程序切换不是<strong>线程切换</strong>, 而是由程序自身控制.</li><li>因此, 没有线程切换的开销. </li><li>和线程切换相比, 线程数量越多, 协程的性能优势就越明显. </li><li>不需要多线程的<strong>锁</strong>机制, 因为只有一个线程.</li><li>也不存在同时写变量冲突, 在协程中控制共享资源不加锁, 只需要判断状态就好了.</li><li>所以执行效率比多线程高很多.</li></ul></li><li><p>进程 ⊃ 线程 ⊃ 协程</p></li></ul><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><p><strong>并行(parallel)</strong>: 指在同一时刻, 有多条指令在多个处理器上同时执行. 就好像两个人各拿一把铁锨在挖坑, 一小时后, 每人一个大坑. 所以无论从微观还是从宏观来看, 二者都是一起执行的.\</p><p><img src="/../images/go%E7%9A%84%E5%B9%B6%E5%8F%91/image-20241021171723178.png" alt="image-20241021171723178"></p><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p><strong>并发(concurrency)</strong>: 指在<strong>同一时刻</strong>只能有<strong>一条指令</strong>执行, 但多个进程指令被快速的<strong>轮换执行</strong>,使得在<strong>宏观上</strong>具有多个进程同时执行的效果, 但在<strong>微观上</strong>并不是同时执行的, 只是把时间分成若干段, 使多个进程快速交替的执行. 这就好像两个人用同一把铁锨, 轮流挖坑, 一小时后, 两个人各挖一个小一点的坑, 要想挖两个大一点得坑, 一定会用两个小时.</p><p><img src="/../images/go%E7%9A%84%E5%B9%B6%E5%8F%91/image-20241021171741430.png" alt="image-20241021171741430"></p><h4 id="两者的关系-1"><a href="#两者的关系-1" class="headerlink" title="两者的关系"></a>两者的关系</h4><ul><li>多线程程序在<strong>一个核</strong>的CPU上运行,就是<strong>并发</strong>.</li><li>多线程程序在<strong>多个核</strong>的CPU上运行,就是<strong>并行</strong>.</li><li><strong>并行</strong>是物理上的同时发生, <strong>并发</strong>是逻辑上的同时发生.</li></ul><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><blockquote><p>这东西太吊了, 这里只是介绍, 后面会单独开一章讲.</p></blockquote><p>Goroutine 是由官方实现的超级”线程池”, Go 高并发的根本原因在于其轻量级的协程 (<strong>Goroutine</strong>) 和高效的<strong>调度器</strong>.</p><ul><li>协程比线程更加轻量.</li><li>Go 的调度器又能够有效地在多个 CPU 核心上调度这些协程, 从而实现高效的并发处理.</li></ul><p>Goroutine 奉行通过通信 (Channel) 来共享内存, 而不是共享内存来通信.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Golang 并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在openWrt部署阿里云的DDNS</title>
    <link href="/2024/10/20/%E5%9C%A8OpenWrt%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%9A%84DDNS/"/>
    <url>/2024/10/20/%E5%9C%A8OpenWrt%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%9A%84DDNS/</url>
    
    <content type="html"><![CDATA[<h1 id="在OpenWrt部署阿里云域名的DDNS"><a href="#在OpenWrt部署阿里云域名的DDNS" class="headerlink" title="在OpenWrt部署阿里云域名的DDNS"></a>在OpenWrt部署阿里云域名的DDNS</h1><p>校园网送我个公网ip, 不用白不用</p><p>使用Github开源项目: <a href="https://github.com/jeessy2/ddns-go">https://github.com/jeessy2/ddns-go</a></p><p>自动获得你的公网 IPv4 或 IPv6 地址，并解析到对应的域名服务。</p><p>支持的域名服务商 <code>阿里云</code> <code>腾讯云</code> <code>Dnspod</code> <code>Cloudflare</code> <code>华为云</code> <code>Callback</code> <code>百度云</code> <code>Porkbun</code> <code>GoDaddy</code> <code>Namecheap</code> <code>NameSilo</code> <code>Dynadot</code></p><h2 id="1-注册一个域名"><a href="#1-注册一个域名" class="headerlink" title="1. 注册一个域名"></a>1. 注册一个域名</h2><p>加油</p><h2 id="2-申请一个AccessKey"><a href="#2-申请一个AccessKey" class="headerlink" title="2. 申请一个AccessKey"></a>2. 申请一个AccessKey</h2><p>登陆阿里云<a href="https://ram.console.aliyun.com/overview">RAM控制台</a>, 新建一个子帐户, 并为子账户配置<code>AliyunDNSReadOnlyAccess</code>和<code>AliyunDNSFullAccess</code>的权限策略.</p><p>然后创建一个<code>AccessKey</code>, 并<strong>记住它</strong></p><h2 id="3-在openWrt中使用DDns-Go"><a href="#3-在openWrt中使用DDns-Go" class="headerlink" title="3. 在openWrt中使用DDns-Go"></a>3. 在openWrt中使用DDns-Go</h2><h2 id="3-1-查看系统架构"><a href="#3-1-查看系统架构" class="headerlink" title="3.1 查看系统架构"></a>3.1 查看系统架构</h2><p>在OpenWrt-状态-系统-架构里可以看到自己路由器的系统架构</p><p><img src="/../images/%E5%9C%A8OpenWrt%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%9A%84DDNS/01.png"></p><h2 id="3-2-下载对应的包"><a href="#3-2-下载对应的包" class="headerlink" title="3.2 下载对应的包"></a>3.2 下载对应的包</h2><p>在 <a href="https://github.com/jeessy2/ddns-go/releases">Release</a>下载对应的包, 注意要选择<strong>Linux</strong>系统的包</p><p><img src="/../images/%E5%9C%A8OpenWrt%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%9A%84DDNS/02.png"></p><h2 id="3-3-把包推送到路由器"><a href="#3-3-把包推送到路由器" class="headerlink" title="3.3 把包推送到路由器"></a>3.3 把包推送到路由器</h2><p><strong>Linux</strong>下, 我们可以使用scp命令, 把文件推到路由器.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -O &lt;filename&gt; root@[ip]:[path]<br></code></pre></td></tr></table></figure><p>比如说:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp -O ddns-go root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.1</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:/root</span><br></code></pre></td></tr></table></figure><p><strong>Windows</strong>的小伙伴可以参考<a href="https://www.baidu.com/s?wd=windows%E6%80%8E%E4%B9%88%E6%8A%8A%E6%96%87%E4%BB%B6%E4%BC%A0%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8">windows怎么把文件传到Linux服务器</a>.</p><h2 id="3-4-运行安装"><a href="#3-4-运行安装" class="headerlink" title="3.4 运行安装"></a>3.4 运行安装</h2><p>使用ssh连接上OpenWrt后, 我们cd到<code>ddns-go</code>文件所在的目录下, 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./ddns-go -s install<br></code></pre></td></tr></table></figure><p>当我们看到下图所示的连接后, 我们可以通过 <strong>网关ip+端口</strong>的形式访问到<strong>web配置页</strong>, 比如说我的就是:192.168.1.1:9876</p><p><img src="/../images/%E5%9C%A8OpenWrt%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%9A%84DDNS/03.png" alt="03"></p><h2 id="3-5-简单的配置"><a href="#3-5-简单的配置" class="headerlink" title="3.5 简单的配置"></a>3.5 简单的配置</h2><p>选择指定的域名商, 添加刚才让你记住的<code>AccessKey</code>和<code>SecretKey</code>.</p><img src="../images/在OpenWrt部署阿里云域名的DDNS/04.png" alt="04" style="zoom:50%;" /><p>添加自己的域名 比如说我想绑定我自己的二级域名 <strong>aaa.example.com</strong>, 那就填写<strong>aaa:example.com</strong></p><img src="../images/在OpenWrt部署阿里云域名的DDNS/05.png" alt="image-20241021003819535" style="zoom: 67%;" /><p>然后保存</p><h2 id="3-6-配置域名解析"><a href="#3-6-配置域名解析" class="headerlink" title="3.6 配置域名解析"></a>3.6 配置域名解析</h2><p>进入<a href="https://dc.console.aliyun.com/">阿里云域名控制台</a> &gt; 域名列表 &gt; 选择你的域名 &gt; 域名解析 &gt;添加记录</p><p>我们添加一个<strong>A记录</strong>用于ipv4, 主机记录填我们刚才填的<strong>aaa</strong>, 记录值可以随便填, 只要符合ip规则即可, 后续我们的ddns服务会自动的更新公网ip</p><img src="../images/在OpenWrt部署阿里云域名的DDNS/06.png" alt="image-20241021004403525" style="zoom: 67%;" /><p>不出意外, 我们的记录值会自动的更新</p><p><img src="/../images/%E5%9C%A8OpenWrt%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%9A%84DDNS/09.png" alt="image-20241021004705990"></p><p>终端也会输出</p><p><img src="/../images/%E5%9C%A8OpenWrt%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%9A%84DDNS/07.png" alt="image-20241021004817450"></p><p>那么恭喜你,成功的配置好了DDns!</p><h2 id="4-太好了-终于配好了"><a href="#4-太好了-终于配好了" class="headerlink" title="4. 太好了! 终于配好了"></a>4. 太好了! 终于配好了</h2><p>简单部署一个go的服务上去测试一下!</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pingHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-keyword">if</span> r.URL.Path != <span class="hljs-string">&quot;/ping&quot;</span> &#123;<br>http.NotFound(w, r)<br><span class="hljs-keyword">return</span><br>&#125;<br>io.WriteString(w, <span class="hljs-string">&quot;pong&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/ping&quot;</span>, pingHandler)<br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>不出以外, 也是可以通过域名访问的到的. </p><p><img src="/../images/%E5%9C%A8OpenWrt%E9%83%A8%E7%BD%B2%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%9A%84DDNS/08.png" alt="08"></p>]]></content>
    
    
    
    <tags>
      
      <tag>openWrt DDns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流量切换以及负载均衡方案(初稿)</title>
    <link href="/2024/10/19/%E6%B5%81%E9%87%8F%E5%88%87%E6%8D%A2%E4%BB%A5%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%96%B9%E6%A1%88-%E5%88%9D%E7%A8%BF/"/>
    <url>/2024/10/19/%E6%B5%81%E9%87%8F%E5%88%87%E6%8D%A2%E4%BB%A5%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%96%B9%E6%A1%88-%E5%88%9D%E7%A8%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="流量切换以及负载均衡方案-初稿"><a href="#流量切换以及负载均衡方案-初稿" class="headerlink" title="流量切换以及负载均衡方案(初稿)"></a>流量切换以及负载均衡方案(初稿)</h1><h2 id="当前的问题"><a href="#当前的问题" class="headerlink" title="当前的问题"></a><strong>当前的问题</strong></h2><p>目前有四条api可以从zf获取数据</p><ul><li>外网统一</li><li>内网统一</li><li>外网正方</li><li>内网正方</li></ul><p>四条api都存在着不稳定的特点，响应时间也较长。同时内网会在晚上自动屏蔽，这也给负载带来了挑战</p><p>对于响应时间较长的问题，可以使用负载均衡在最大限度上提供保障。</p><p>但是由于api不稳定的特性，就有必要检测api的健康状态，需要在一条api出现问题的时候自动将api从负载均衡的列表中移除，并在恢复健康后重新添加到列表中。</p><h2 id="目前的方案"><a href="#目前的方案" class="headerlink" title="目前的方案"></a><strong>目前的方案</strong></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h3><p>根据gin反馈的接口反馈(请求耗时, 状态码), 记录请求的<strong>失败率</strong>以及请求的<strong>耗时</strong>等,结合多个参数对四条线路评估, 用于评估该条线路的质量. 便于进行分流.</p><h3 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a><strong>工作队列</strong></h3><p>使用一个<strong>优先队列</strong>用于维护所有<strong>参与请求处理</strong>的线路, 根据线路的质量来评判<strong>优先级</strong>, 优先级高的优先参与请求的处理, 当一个线路挂了, 就将其加入<strong>死亡队列</strong>进行<strong>唤醒</strong>.</p><h3 id="死亡队列"><a href="#死亡队列" class="headerlink" title="死亡队列"></a><strong>死亡队列</strong></h3><p>死亡队列用于存放在工作队列中挂掉的线路, 单独起一个goroutine来定时发送请求来<strong>唤醒</strong>, 直到可以<strong>成功请求</strong>并<strong>延时优秀</strong>再将其重新添加回工作队列, 并赋予<strong>低优先级(避免抖动,<strong>让其重新参与底层工作,通过工作队列的竞争机制来获得高优先级</strong>)</strong></p><h3 id="如何去维护工作队列"><a href="#如何去维护工作队列" class="headerlink" title="如何去维护工作队列"></a><strong>如何去维护工作队列</strong></h3><p>使用<strong>redis</strong>记录最近<strong>十分钟</strong>的所有请求, 每隔一定时间起一个goroutine进行一次<strong>统计</strong>以及<strong>排序</strong>并<strong>更新工作队列</strong></p><h3 id="更新工作队列"><a href="#更新工作队列" class="headerlink" title="更新工作队列"></a><strong>更新工作队列</strong></h3><p>更新工作队列时为了保证请求的稳定性, 不能修改原工作队列, 而是新开一个工作队列, 并在完成统计工作后将请求指向新的工作队列. <strong>重定向的过程得加锁, 应该是并发造成的数据不一致问题</strong></p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a><strong>负载均衡策略</strong></h3><p>根据工作队列, 分配任务量给各个线路,</p><script>MathJax = {  tex: {    inlineMath: [['$', '$'], ['\\(', '\\)']]  }};</script><script id="MathJax-script" async  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script<p>$$<br>流量分配比例:T_i&#x3D;\left(\frac{\frac{1}{x_i}}{\sum \frac{1}{x_i}}\right) \times 100%   (其中x_i表示线路i的延时)<br>$$</p><p>采用加权<a href="https://www.pdai.tech/md/algorithm/alg-domain-load-balance.html#%E9%9A%8F%E6%9C%BA%E6%B3%95-random">随机法</a>生成一个0-1的随机浮点数来决定采用哪个线路.</p><h3 id="告警"><a href="#告警" class="headerlink" title="告警"></a><strong>告警</strong></h3><p>当有线路长时间在死亡队列中(2h?), 无法唤醒, 发邮件告警.</p><h3 id="针对内网的处理"><a href="#针对内网的处理" class="headerlink" title="针对内网的处理"></a><strong>针对内网的处理</strong></h3><ol><li><p>每天24点后自动把内网的接口踢出<strong>工作队列</strong>.</p></li><li><p>每天6点把内网接口加入<strong>死亡队列</strong>进行<strong>唤醒</strong>.</p><p><img src="/../images/%E6%B5%81%E9%87%8F%E5%88%87%E6%8D%A2%E4%BB%A5%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%96%B9%E6%A1%88-%E5%88%9D%E7%A8%BF/overview.png" alt="OverView"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>负载均衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是我第一篇博客</title>
    <link href="/2024/10/08/%E8%BF%99%E6%98%AF%E6%88%91%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/10/08/%E8%BF%99%E6%98%AF%E6%88%91%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="终于部署好了"><a href="#终于部署好了" class="headerlink" title="终于部署好了"></a>终于部署好了</h1><p>这是我的第一篇博客</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
